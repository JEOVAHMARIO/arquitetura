<!-- public/views/index.ejs -->

<!DOCTYPE html>
<html lang="en">

<head>
    <link rel="manifest" href="/manifest.json">
    <script>
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', async () => {
                try {
                    let registration = await navigator.serviceWorker.register('/_js/ServiceWorker.js')
                    console.log('Service Worker registered:', registration);
                } catch (error) {
                    console.log('Service Worker registration failed:', error);
                }
            });
        }
    </script>

    <meta charset="UTF-8">
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script src="https://unpkg.com/vue-router@4.0.15/dist/vue-router.global.js"></script>
    <title>Área do Suporte</title>
    <style>
        .pequeno {
            color: green;
        }

        .especial {
            color: red;
        }

        .resposta {
            margin-top: 10px;
            padding: 10px;
            border: 1px solid #ccc;
        }
    </style>
    <link rel="stylesheet" href="/styles.css">
</head>

<body id="app">
    <% include ('cabecalho.ejs') %>
        <div class="container">
            <img src="/_img/logo.png" alt="Logo">
            <h1>Arquitetura: Cálculo da Área de um Suporte Octogonal!</h1>
            <p>Determine a área de um suporte octogonal. Se a área for menor que 20 metros quadrados, é um suporte
                pequeno. Se estiver fora desse intervalo, é um suporte especial.</p>
            <nav>
                <router-link to="/">Início</router-link>
                <router-link to="/admin/suportes">Admin Suportes</router-link>
                <router-link to="/autor">Autor</router-link>
            </nav>
            <main>
                <router-view />
            </main>
</body>

</html>
</div>
<script type="module">
    import CrudSuportes from './_js/CrudSuportes.js'
    import CartasSuportes from './_js/CartasSuportes.js'
    import ExibeSuportes from './_js/ExibeSuportes.js'
    import DetalhesSuportes from './_js/DetalhesSuportes.js'
    import ListSuportes from './_js/ListSuportes.js'
    import Autor from './_js/Autor.js'
    import Detalhes from './_js/Detalhes.js'

    let suportes = Vue.ref(await listar());
    const routes = [
        {
            path: '/', component: ListSuportes, props: {
                suportes
            }
        },
        {
            path: '/admin/suportes', component: CrudSuportes, props: {
                suportes
            }
        },
        { path: '/autor', component: Autor },
        {
            path: '/detalhes/:id', component: Detalhes, props: {
                suportes
            }
        }
    ]

    const router = VueRouter.createRouter({
        history: VueRouter.createMemoryHistory(),
        routes,
    });

    async function listar() {
        try {
            let resposta = await fetch('/suportes');
            let suportes = await resposta.json();
            return suportes;
        } catch (error) {
            console.error('Erro ao listar suportes:', error);
            throw error;
        }
    }

    const app = Vue.createApp({
        data() {
            return {
                lista: [],
                mostrarCrudSuportes: true,
                mostrarCartasSuportes: false,
                mostrarExibeSuportes: false,
                mostrarDetalhesSuportes: false,
                mostrarListSuportes: true,
                mostrarAutor: true
            };
        },
        methods: {
            seleciona(evento) {
                this.nome = evento;
            }
        },
        async mounted() {
            try {
                this.lista = await listar();
            } catch (error) {
                console.error('Erro ao carregar lista de suportes:', error);
            }
        }
    });

    app.use(router);
    app.mount('#app');
</script>
<script src="/_js/SuportesStoreAPI.js"></script>
<script>

    if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
            Notification.requestPermission();
            navigator.serviceWorker.register('/worker.js', { scope: '/'})
                .then(registration => {
                    console.log('Service Worker registered:', registration);
                    //const worker = new Worker('_js/worker.js');
                    console.log({ registration });
                    // Envia dados para o Worker
                    //registration.postMessage('oi da pagina');

                    // Escuta a resposta do Worker
                    registration.addEventListener('message', event => {
                        console.log('recebeu ', event.data);
                    });
                })
                .catch(error => {
                    console.log('Service Worker registration failed:', error);
                });
        });
    }


</script>